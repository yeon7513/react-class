REST (Representational State Transfer)
  => 웹 애플리케이션과 웹 서비스의 설계를 위한 아키텍처 스타일
  => RESTful 애플리케이션은 REST 원칙을 따르는 애플리케이션을 의미한다.

1. 자원 (resource):
  => REST에서는 모든 것이 자원이다.
  => 이 자원은 URL(Uniform Resource Locator)을 통해 식별된다.
  => 자원은 데이터베이스의 컬렉션(테이블), 문서(로우) 또는 비즈니스 객체 등을 포함할 수 있다. (* 비즈니스 객체 : 통신을 통해서 받아올 수 있는 데이터들)

2. HTTP 메소드:
  => REST는 HTTP 메소드를 사용하여 자원을 조작한다.
  2-1. GET
    => 자원 조회 (Read)

  2-2. POST
    => 자원 생성(혹은 자원을 조회할 때에도 쓸 수 있다.) (Create)

  2-3. PUT
    => 자원 전체 수정 (Update/All)

  2-4. PATCH 
    => 자원 부분 수정 (Update/Partial)
    => 없으면 만들어주고, 있으면 수정함.

  2-5. DELETE 
    => 자원 삭제 (Delete)

  2-6. 사용 예시
    => https://localhost:3000/
      - GET /users : 모든 사용자 목록을 가져온다.
      - GET /users/{userId} : 특정 사용자 정보를 가져온다.
      - POST /users : 새로운 사용자를 생성한다.
      - PUT /users/{userId} : 특정 사용자의 정보를 전체적으로 업데이트한다.
      - PATCH /users/{userId} : 특정 사용자의 정보 중 일부를 업데이트한다.
      - DELETE /users/{userId} : 특정 사용자를 삭제한다.

3. 무상태성 (Statelessness):
  => 각 요청은 독립적이어야 하며, 서버는 요청 간의 상태를 저장하지 않는다.
  => 모든 필요한 정보는 요청에 포함되어야 한다.

4. 캐시 가능성(Caching):
  => 응답은 캐시될 수 있어야 하며, 클라이언트는 서버의 응답을 캐시하여 성능을 개선할 수 있다. (* 캐시 : 브라우저에 임시로 저장하는 것)

5. 계층화된 시스템 (Layered System):
  => 클라이언트는 서버의 직접적인 구현을 알 필요 없이 계층화된 시스템을 통해 자원에 접근한다.
  => 계층화된 시스템? HTTP 메소드를 통해 구현된 시스템

6. 일관된 인터페이스 (Uniform Interface):
  => 자원에 접근하는 인터페이스는 일관되어야 하며, RESTful API는 표준화된 인터페이스를 통해 클라이언트와 서버간의 상호작용을 단순화한다. 